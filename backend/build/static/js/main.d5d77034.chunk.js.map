{"version":3,"sources":["functions.js","components/Menu.js","components/MediaType.js","services/memes.js","reducers/memeReducer.js","components/MemeInfo.js","services/tickets.js","components/Info.js","services/users.js","components/Login.js","components/NewPost.js","components/UserSearchBar.js","services/login.js","reducers/notificationReducer.js","reducers/loggedReducer.js","components/User.js","App.js","reducers/userReducer.js","store.js","index.js"],"names":["parseDate","input","parts","match","Date","exportedObject","getLikes","user","memes","likes","i","length","id","getComments","comments","j","username","getRank","users","compareByLikes","a","b","compareByDate","date1","date","date2","getTime","Menu","props","useSelector","state","logged","thisUser","AppBar","position","Toolbar","style","display","justifyContent","Button","marginRight","marginLeft","variant","color","component","Link","to","margin","sx","xs","md","onClick","handleLogout","Media","mediaType","meme","media","substr","lastIndexOf","controls","src","type","alt","title","baseUrl","token","getAll","axios","get","then","response","data","create","newObject","config","headers","Authorization","post","update","put","setToken","newToken","remove","delete","vote","votedMeme","addComment","comment","initializeMemes","dispatch","memeService","memeReducer","action","console","log","memeToChange","find","n","changedMeme","votes","map","MemeInfo","useState","newComment","setNewComment","disable","setDisable","classes","makeStyles","theme","root","width","maxWidth","inline","useStyles","useDispatch","window","location","pathname","substring","event","preventDefault","alert","commentObject","content","returnedMeme","reload","disabled","addVote","List","className","ListItem","alignItems","ListItemAvatar","Avatar","avatar","ListItemText","primary","secondary","Typography","Divider","onSubmit","TextField","label","value","name","onChange","target","postTicket","Info","ticketType","setTicketType","ticketContent","setTicketContent","sendTicket","ticketObject","ticketService","returnedTicket","marginBottom","marginTop","FormControl","m","minWidth","InputLabel","Select","labelId","MenuItem","multiline","rows","selectedValue","document","getElementById","updateAvatar","newAvatar","updatedUser","newUser","modalStyles","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","createTheme","RegisterModal","classesModal","React","top","left","transform","modalStyle","open","setOpen","handleClose","href","mt","mb","Modal","onClose","registerUser","newUsername","setNewUsername","newPassword","setNewPassword","Login","Error","message","registeringUser","password","userService","returnedUser","setUsername","setPassword","setNotification","error","setErrorMessage","setTimeout","body","ThemeProvider","Container","CssBaseline","Box","bgcolor","flexDirection","handleLogin","noValidate","errorMessage","Notification","noteMessage","required","autoComplete","autoFocus","NewPost","addMeme","newTitle","setNewTitle","newMedia","setNewMedia","UserSearchBar","filter","setFilterData","placeholder","textField","InputProps","startAdornment","fontSize","endAdornment","IconButton","size","login","credentials","duration","notificationReducer","logIn","loggedReducer","ModalUploadOption","User","useParams","theseMemes","push","SimpleModal","setNewAvatar","file","useEffect","setAvatarByURL","catch","height","Math","abs","Function","joined","confirm","ConfirmMemeDelete","App","setFilter","setUser","notification","sort","loggedUserJSON","localStorage","getItem","JSON","parse","main","orange","green","loginService","setItem","stringify","removeItem","memeObject","loggedIn","Alert","severity","flexWrap","overflow","imageList","icon","TopRatedMemeList","ImageList","ImageListItem","cols","ImageListItemBar","subtitle","actionIcon","MostRecentMemeList","rowHeight","path","TableContainer","Paper","Table","TableBody","includes","TableRow","TableCell","userReducer","combinedReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","getState","ReactDOM","render"],"mappings":"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","file":"static/js/main.d5d77034.chunk.js","sourcesContent":["/**\n   * Laskee parametrina annetun käyttäjän kaikkien meemien tykkäykset.\n   * @param user käyttäjä, jonka tykkäykset lasketaan.\n   * @returns parametrina annetun käyttäjän kaikkien meemien tykkäysten summa.\n   */\nfunction getLikes( user, memes ) {\n\n  var likes = 0\n\n  for (var i = 0; i < memes.length; i++) {\n    if (memes[i].user.id === user.id) likes = likes + memes[i].likes\n  }\n  return likes\n}\n\n/**\n   * Laskee parametrina annetun käyttäjän kaikkien meemien kommenttien määrän.\n   * @param user käyttäjä, jonka meemien kommenttien määrä lasketaan.\n   * @returns parametrina annetun käyttäjän kaikkien meemien kommenttien määrä.\n   */\nfunction getComments( user,memes ) {\n\n  var comments = 0\n\n  for (var i = 0; i < memes.length; i++) {\n    for (var j = 0; j < memes[i].comments.length; j++) {\n      if (memes[i].comments[j].user === user.username) comments++\n    }\n  }\n  return comments\n}\n\n\n/**\n   * Selvittää, mikä sija (indeksi) käyttäjien listassa parametrinä annetulla käyttäjällä on, ja palauttaa siten kyseisen sijan (indeksin)\n   * @param user käyttäjä, jonka sija palautetaan.\n   * @returns parametrinä annetun käyttäjän indeksi. Jos käyttäjää ei löydy, palautetaan viimeisenä käyttäjien listalla olevan indeksi.\n   */\nfunction getRank( user,users ) {\n\n  for (var i = 0; i < users.length; i++) {\n    if (users[i] === user) return i+1\n  }\n  return users.length-1\n}\n\n/**\n   * Vertailee kahden objektin tykkäyksiä keskenään.\n   * @param a ensimmäinen vertailtava objekti\n   * @param b toinen vertailtava objekti\n   * @returns -1 jos a:n tykkäykset suuremmat. 1 jos b:n tykkäykset suuremmat. 0 jos yhtäsuuret.\n   */\nfunction compareByLikes( a, b ) {\n  if ( a.likes > b.likes ){\n    return -1\n  }\n  if ( a.likes < b.likes ){\n    return 1\n  }\n  return 0\n}\n\n/**\n   * Muuttaa String-muotoisen päivämäärän ilmaisun Date-muotoon.\n   * @param input Päivämäärä String-muodossa.\n   * @return päivämäärä Date-muodossa.\n  */\nfunction parseDate(input) {\n  var parts = input.match(/(\\d+)/g)\n\n  return new Date(parts[0], parts[1]-1, parts[2])\n}\n\n/**\n   * Vertailee kahden objektin päivämääriä keskenään.\n   * @param a ensimmäinen vertailtava objekti\n   * @param b toinen vertailtava objekti\n   * @returns -1 jos a:n päivämäärä uudempi. 1 jos b:n päivämäärä uudempi. 0 jos sama päivämäärä.\n   */\nfunction compareByDate( a, b ) {\n  var date1 = parseDate(a.date)\n  var date2 = parseDate(b.date)\n\n  if ( date1.getTime() > date2.getTime() ){\n    return -1\n  }\n  if ( date1.getTime() < date2.getTime() ){\n    return 1\n  }\n  return 0\n}\n\nconst exportedObject = {\n  getLikes,\n  getComments,\n  getRank,\n  compareByLikes,\n  compareByDate\n}\n\nexport default exportedObject","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { AppBar, Toolbar, Button } from '@material-ui/core'\nimport ExitToApp from '@material-ui/icons/ExitToApp'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport PeopleIcon from '@material-ui/icons/People'\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos'\nimport StarsIcon from '@material-ui/icons/Stars'\nimport WatchLaterIcon from '@material-ui/icons/WatchLater'\nimport { Link } from 'react-router-dom'\n\nconst Menu = (props) => {\n  const users = useSelector(state => state.users)\n  const username = props.logged.username\n  let thisUser = {\n    username: '0'\n  }\n\n  for (var i = 0;i < users.length;i++)\n  {\n    if (username === users[i].username) {\n      thisUser = users[i]\n      break\n    }\n  }\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar style={{ display:'flex', justifyContent:'space-between' }}>\n        <div></div>\n        <div >\n          <Button style={{ marginRight: 10, marginLeft: 100 }} variant=\"contained\" color=\"inherit\" component={Link} to=\"/top\">\n            <b>Top</b><StarsIcon style={{ marginLeft: 10 }}/>\n          </Button>\n          <Button style={{ margin: 10 }} variant=\"contained\" color=\"inherit\" component={Link} to=\"/fresh\">\n            <b>Fresh</b><WatchLaterIcon style={{ marginLeft: 10 }}/>\n          </Button>\n          <Button style={{ margin: 10 }} variant=\"contained\" color=\"inherit\" component={Link} to=\"/newpost\">\n            <b>New post</b><AddToPhotosIcon style={{ marginLeft: 10 }}/>\n          </Button>\n          <Button style={{ margin: 10 }} variant=\"contained\" color=\"inherit\" component={Link} to=\"/users\">\n            <b>Users</b><PeopleIcon style={{ marginLeft: 10 }}/>\n          </Button>\n          <Button style={{ margin: 10 }} variant=\"contained\" color=\"inherit\" component={Link} to={`/users/${thisUser.id}`}>\n            <b>My Profile</b><AccountCircleIcon style={{ marginLeft: 10 }}/>\n          </Button>\n        </div>\n        <div>\n          <Button color=\"inherit\" component={Link} to=\"/info\">\n            Info & Support <InfoIcon style={{ marginLeft: 10 }}/>\n          </Button>\n          <Button color=\"inherit\" sx={{ display: { xs: 'none', md: 'flex' } }} onClick={props.handleLogout}>Logout <ExitToApp style={{ marginLeft: 10 }}/></Button>\n        </div>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Menu\n\n\n","import '../index.css'\n\n/**\n * Tarkastaa, onko meemin media video vai kuva, ja palauttaa sen perusteella kuvan/videon sopivassa muodossa.\n * @param {meme.media} props meemin media.\n * @returns media sopivassa muodossa.\n */\nconst Media = (props) => {\n\n  var mediaType = props.meme.media.substr(props.meme.media.lastIndexOf('.') + 1)\n\n  if ( mediaType === 'mp4' || mediaType === 'webm' ) {\n    return (\n      <video id={props.id} controls>\n        <source src={props.meme.media} type='video/mp4' />\n      </video> )\n  } else return ( <img id={props.id} src={props.meme.media} alt={props.meme.title} /> )\n}\n\nexport default Media","import axios from 'axios'\nconst baseUrl = '/api/memes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`/api/memes/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const request = axios.delete(`/api/memes/${id}`,config)\n  return request.then(response => response.data)\n}\n\nconst vote = async (meme) => {\n  const votedMeme = {\n    ...meme,\n    likes: meme.likes + 1\n  }\n  const response = await axios.put(`${baseUrl}/${meme.id}`, votedMeme)\n  return response.data\n}\n\nconst addComment = async (meme, comment) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n  const response = await axios.post(`${baseUrl}/${meme.id}/comments`, comment, config)\n  return response.data\n}\n\nconst exportedObject = {\n  getAll,\n  create,\n  update,\n  setToken,\n  remove,\n  vote,\n  addComment\n}\n\nexport default exportedObject","/* eslint-disable no-case-declarations */\nimport memeService from '../services/memes'\n\nconst memeReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'NEW_MEME':\n    console.log('action.data: ' , action.data)\n    return [...state, action.data]\n  case 'INIT_MEMES':\n    return action.data\n  case 'VOTE':\n    const id = action.data.id\n    const memeToChange = state.find(n => n.id === id)\n    const changedMeme = {\n      ...memeToChange,\n      votes: memeToChange.votes + 1\n    }\n    return state.map(meme =>\n      meme.id !== id ? meme : changedMeme\n    )\n  case 'COMMENT':\n    console.log('action.data: ' , action.data)\n    return [...state, action.data]\n  default:\n    return state\n  }\n}\nexport const addVote = (id,meme) => {\n  return async dispatch => {\n    await memeService.vote(meme)\n    dispatch({\n      type: 'VOTE',\n      data: { id }\n    })\n  }\n}\n\nexport const addComment = (meme,comment) => {\n  return async dispatch => {\n    const newComment = await memeService.addComment(meme, comment)\n    dispatch({\n      type: 'COMMENT',\n      data: newComment\n    })\n  }\n}\n\nexport const createMeme = content => {\n  return async dispatch => {\n    const newMeme = await memeService.create(content)\n    dispatch({\n      type: 'NEW_MEME',\n      data: newMeme\n    })\n  }\n}\n\nexport const initializeMemes = () => {\n  return async dispatch => {\n    const memes = await memeService.getAll()\n    dispatch({\n      type: 'INIT_MEMES',\n      data: memes,\n    })\n  }\n}\n\nexport default memeReducer","import { React, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport Media from './MediaType'\nimport { addVote } from '../reducers/memeReducer'\nimport { TextField, Button } from '@material-ui/core'\nimport memeService from '../services/memes'\nimport { makeStyles } from '@material-ui/core/styles'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport Divider from '@material-ui/core/Divider'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport Avatar from '@material-ui/core/Avatar'\nimport Typography from '@material-ui/core/Typography'\n\nconst MemeInfo = ({ memes }) => {\n\n  const [newComment, setNewComment] = useState('')\n  const [disable, setDisable] = useState(false)\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      width: '100%',\n      maxWidth: '36ch',\n    },\n    inline: {\n      display: 'inline',\n    },\n  }))\n\n  const classes = useStyles()\n\n  const dispatch = useDispatch()\n  const id = window.location.pathname.substring(window.location.pathname.lastIndexOf('/') + 1)\n  let meme = memes[0]\n\n  for (var i = 0;i < memes.length;i++)\n  {\n    if (id === memes[i].id) {\n      meme = memes[i]\n      break\n    }\n  }\n\n  if (!meme) {\n    return null\n  }\n\n  const comments = meme.comments\n\n  /**\n   * Luo kommenttiobjektin newCommentin mukaisesti, ja tekee sen perusteella POST-requestin memeServicen kautta.\n   */\n  const addComment = async (event) => {\n    event.preventDefault()\n\n    if (newComment === '') {\n      window.alert('Text required')\n      return null\n    }\n    const commentObject = {\n      content: newComment\n    }\n\n    memeService\n      .addComment(meme,commentObject)\n      .then(returnedMeme => {\n        setNewComment('')\n      })\n    window.location.reload()\n  }\n\n  return (\n    <div>\n      <h1>{meme.title}</h1>\n      <Media meme={meme} />\n      <p>{meme.likes} likes <Button disabled={disable} variant=\"contained\" color=\"primary\" onClick={() => {\n        setDisable(true)\n        dispatch(addVote(meme.id,meme))\n      }}>like</Button></p>\n      <p>added by  <Link to={`../users/${meme.user.id}`}>{meme.user.username}</Link></p>\n      <h2>Comments</h2>\n      <List className={classes.root}>\n        {comments.map(comment =>\n          <div key={comment.content}>\n            <ListItem alignItems=\"flex-start\">\n              <ListItemAvatar>\n                <Avatar src={comment.avatar} />\n              </ListItemAvatar>\n              <ListItemText\n                primary={comment.content}\n                secondary={<Typography\n                  component=\"span\"\n                  variant=\"body2\"\n                  className={classes.inline}\n                  color=\"textPrimary\"\n                >\n                  {comment.user}, {comment.date}\n                </Typography>} />\n            </ListItem>\n            <Divider variant=\"inset\" component=\"li\" />\n          </div>\n        )}\n      </List>\n      <div>\n        <form onSubmit={addComment}>\n          <div>\n            <TextField label=\"Comment\"\n              id='commentField'\n              type=\"text\"\n              value={newComment}\n              name=\"Comment\"\n              onChange={({ target }) => setNewComment(target.value)}\n            />\n          </div>\n          <Button variant=\"contained\" color=\"primary\" id='submitMeme-button' type=\"submit\">Add a comment</Button>\n        </form>\n      </div>\n    </div>\n  )\n}\n\n\nexport default MemeInfo","import axios from 'axios'\nconst baseUrl = '/api/tickets'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst postTicket = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst exportedObject = {\n  setToken,\n  postTicket\n}\n\nexport default exportedObject","/* eslint-disable no-unused-vars */\nimport React, { useState } from 'react'\nimport ControlPointIcon from '@material-ui/icons/ControlPoint'\nimport CommentIcon from '@material-ui/icons/Comment'\nimport ImageIcon from '@material-ui/icons/Image'\nimport PeopleIcon from '@material-ui/icons/People'\nimport StarsIcon from '@material-ui/icons/Stars'\nimport WatchLaterIcon from '@material-ui/icons/WatchLater'\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos'\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport ExitToApp from '@material-ui/icons/ExitToApp'\nimport Button from '@material-ui/core/Button'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\nimport Select from '@mui/material/Select'\nimport { TextField } from '@material-ui/core'\nimport ticketService from '../services/tickets'\nimport '../index.css'\n\nconst Info = () => {\n\n  const [ticketType, setTicketType] = useState('suggestion')\n  const [ticketContent, setTicketContent] = useState('')\n\n  /**\n   * Muodostaa ticketContentin ja ticketTypen perusteella ticketObjectin, mikäli näiden sisältö on validia. Lähettää näiden perusteella POST-requestin\n   * ticketServicen kautta.\n   */\n  const sendTicket = async (event) => {\n    event.preventDefault()\n\n    if (ticketContent.length < 10) {\n      window.alert('The text is too short.')\n      return null\n    }\n\n    const ticketObject = {\n      content: ticketContent,\n      type: ticketType\n    }\n\n    console.log('ticketObject: ' , ticketObject)\n\n    ticketService\n      .postTicket(ticketObject)\n      .then(returnedTicket => {\n        setTicketType('')\n        setTicketContent('')\n        window.alert('Your ticket has been submitted.')\n      })\n\n    window.location.reload()\n  }\n\n  /**\n   * Asettaa ticketTypen arvoksi valitun arvon\n   */\n  const setType = (event) => {\n    setTicketType(event.target.value)\n  }\n\n  /**\n   * Asettaa ticketContentin arvoksi tekstikenttään kirjoitetun tekstin\n   */\n  function setContent()\n  {\n    var selectedValue = document.getElementById('ticketContent').value\n    setTicketContent(selectedValue)\n  }\n\n  return (\n    <div>\n      <div>\n        <h1>INFO</h1>\n      </div>\n      <div id='infoBar'>\n        <h2>Pages</h2>\n        <b>TOP <StarsIcon />:</b>\n        <p>Shows the memes starting from the most liked in a descending order. <br />You can access the comment section of the meme by clicking its title.</p>\n        <b>FRESH <WatchLaterIcon />:</b>\n        <p>Shows the memes starting from the most recently added in a descending order. <br />You can access the comment section of the meme by clicking its title.</p>\n        <b>NEW POST <AddToPhotosIcon />:</b>\n        <p>Add a new post to the site based on a URL-link and Title you've submitted in the field.</p>\n        <b>USERS <PeopleIcon />:</b>\n        <p>Shows the list of users and their data. The users are listed starting from the one with most activity points in a descending order. <br />\n        You can view the user's profile page by clicking the name on the list. The profile shows you the user's rank, <br />\n        the memes the person has added. By clicking the link in the title on that list you can access the page of the meme.</p>\n        <b>MY PROFILE <AccountCircleIcon />:</b>\n        <p>Leads to your own profile page. You can change your avatar on this page.</p>\n        <b>LOGOUT <ExitToApp />:</b>\n        <p>Logs you off. By logging off you will have to submit credentials in order to view the site with an account on the next time you enter MemeDump. <br />\n        If you exit the site without logging off your user token will be remembered and you will automatically be logged in as the current user <br />\n        the next time you enter the site.</p>\n      </div>\n      <div id='infoBar'>\n        <h2>Activity Points <ControlPointIcon /></h2>\n        <p>Activity points define the ranking of a user. <br />These points are earned by following activities: </p>\n        <p><ImageIcon /> Posting a meme: <b>+3 points</b></p>\n        <p><CommentIcon /> Posting a comment: <b>+1 points</b></p>\n        <p><ThumbUpIcon /> Receiving a like from a meme: <b>+1 points</b></p>\n      </div>\n      <div id='infoBar'>\n        <h2>Send a ticket</h2>\n        <p>In a need to contact the administration? That can be done by sending a ticket here.<br />\n         Select a type from 'Suggestion', 'Bug Report' or 'Other issue' and write a description.</p>\n        <form onSubmit={sendTicket}>\n          <div style={{ marginBottom: 30, marginTop: 20 }}>\n            <FormControl sx={{ m: 1, minWidth: 160 }}>\n              <InputLabel id=\"label-For-Types\">Type</InputLabel>\n              <Select\n                labelId=\"typesLabel\"\n                id=\"types\"\n                value={ticketType}\n                label=\"Type\"\n                onChange={setType}\n              >\n                <MenuItem value={'suggestion'}>Suggestion</MenuItem>\n                <MenuItem value={'bug report'}>Bug Report</MenuItem>\n                <MenuItem value={'other issue'}>Other Issue</MenuItem>\n              </Select>\n            </FormControl>\n          </div>\n          <div>\n            <TextField sx={{ minWidth: 300 }}\n              id=\"ticketContent\"\n              label=\"Describe your issue here\"\n              multiline\n              rows={4}\n              onChange={setContent}\n            />\n          </div>\n          <div id='ticketSubmit'>\n            <Button variant=\"contained\" color=\"primary\" id='submitTicket-button' type=\"submit\">Submit</Button>\n          </div>\n        </form>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Info","/* eslint-disable no-unused-vars */\nimport axios from 'axios'\nconst baseUrl = '/api/users'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst updateAvatar = (user, newAvatar) => {\n\n  const updatedUser = {\n    ...user,\n    avatar: newAvatar\n  }\n  const request = axios.put(`/api/users/${user.id}`, updatedUser)\n  return request.then(response => response.data)\n}\n\nconst newUser = (user) => {\n  const request = axios.post('/api/users', user)\n  return request.then(response => response.data)\n}\n\nconst exportedObject = {\n  getAll,\n  updateAvatar,\n  newUser\n}\n\nexport default exportedObject","import userService from '../services/users'\nimport React, { useState } from 'react'\nimport Modal from '@material-ui/core/Modal'\nimport { TextField, Button, makeStyles, Container } from '@material-ui/core'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\nimport CssBaseline from '@mui/material/CssBaseline'\nimport Box from '@mui/material/Box'\nimport Avatar from '@mui/material/Avatar'\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied'\nimport Typography from '@mui/material/Typography'\nimport Link from '@mui/material/Link'\nimport '../index.css'\n\nconst modalStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}))\n\nconst theme = createTheme()\n\nconst Login = (props) => {\n\n  const [newUsername, setNewUsername] = useState('')\n  const [newPassword, setNewPassword] = useState('')\n\n  const Error = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n  /**\n   * Luo käyttäjäolion newUsernamen ja newPasswordin perusteella mikäli ne ovat valideja, ja lähettää userServicen kautta POST-requestin userServicen kautta.\n   */\n  const registerUser = async (event) => {\n    event.preventDefault()\n\n    if (newUsername.length < 3 || newPassword.length < 4 ) {\n      window.alert('Cannot register a user with given details. The username must be longer than 2 letters and password longer than 3 letters.')\n      return null\n    }\n\n    let registeringUser = {\n      username: newUsername,\n      password: newPassword,\n      avatar: 'https://media.istockphoto.com/vectors/default-profile-picture-avatar-photo-placeholder-vector-illustration-vector-id1223671392?b=1&k=20&m=1223671392&s=612x612&w=0&h=NlD1eNScGYsHBFjAzWrR0JzwkTOvtddTsq-9v5-LryQ='\n    }\n\n    try {\n      userService\n        .newUser(registeringUser)\n        .then(returnedUser => {\n          props.setUsername('')\n          props.setPassword('')\n          props.dispatch(props.setNotification(`Succesfully registered a new user with username: '${props.user.username}'`,5))\n        })\n    } catch(error) {\n      props.setErrorMessage('An error occured. Make sure that your username and password have at least 3 letters and that your username is unique.')\n      setTimeout(() => {\n        props.setErrorMessage(null)\n      }, 3000)\n      console.log(\n        'An error occurred'\n      )\n    }\n    window.location.reload()\n  }\n\n  document.body.style.backgroundColor = 'orange'\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container >\n        <CssBaseline />\n        <Box\n          sx={{\n            bgcolor: 'white',\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <SentimentVerySatisfiedIcon />\n          </Avatar>\n          <Typography id=\"title\" component=\"h1\" variant=\"h5\">\n            MemeDump\n          </Typography>\n          <div>\n            <h2>Login</h2>\n\n            <Box component=\"form\" onSubmit={props.handleLogin} noValidate sx={{ mt: 1 }}>\n              <Error message={props.errorMessage} />\n              <props.Notification message={props.noteMessage} />\n              <div>\n                <TextField label=\"username\"\n                  margin=\"normal\"\n                  required\n                  autoComplete=\"username\"\n                  autoFocus\n                  id='username'\n                  type=\"text\"\n                  value={props.username}\n                  name=\"Username\"\n                  onChange={({ target }) => props.setUsername(target.value)}\n                />\n              </div>\n              <div>\n                <TextField label=\"password\"\n                  margin=\"normal\"\n                  required\n                  autoComplete=\"current-password\"\n                  id='password'\n                  type=\"password\"\n                  value={props.password}\n                  name=\"Password\"\n                  onChange={({ target }) => props.setPassword(target.value)}\n                />\n              </div>\n              <Button\n                sx={{ mt: 3, mb: 2 }}\n                variant=\"contained\"\n                color=\"primary\"\n                id='login-button'\n                type=\"submit\"\n              >Login</Button>\n              <RegisterModal registerUser={registerUser} newUsername={newUsername} setNewUsername={setNewUsername} newPassword={newPassword} setNewPassword={setNewPassword}/>\n            </Box>\n          </div>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  )\n}\n\n\nconst RegisterModal = (props) => {\n\n  function getModalStyle() {\n    const top = 50\n    const left = 50\n\n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    }\n  }\n\n  const classesModal = modalStyles()\n  const [modalStyle] = React.useState(getModalStyle)\n  const [open, setOpen] = React.useState(false)\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Link href=\"#\" variant=\"body2\" sx={{ mt: 3, mb: 2 }} onClick={handleOpen}>{'Don\\'t have an account? Sign Up'}</Link>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        <div style={modalStyle} className={classesModal.paper}>\n          <form onSubmit={props.registerUser}>\n            <h2 id=\"simple-modal-title\">Create a new account</h2>\n            <div>\n              <TextField label=\"Username\"\n                id='usernameField'\n                type=\"text\"\n                value={props.newUsername}\n                name=\"Title\"\n                onChange={({ target }) => props.setNewUsername(target.value)}\n              />\n            </div>\n            <div>\n              <TextField label=\"Password\"\n                id='passwordField'\n                type=\"text\"\n                value={props.newPassword}\n                name=\"Title\"\n                onChange={({ target }) => props.setNewPassword(target.value)}\n              />\n            </div>\n            <div>\n              <Button variant=\"contained\" color=\"primary\" id='submitUser-button' type=\"submit\">Submit</Button>\n              <Button variant=\"contained\" color=\"primary\" id='submitUser-button' onClick={handleClose}>Close</Button>\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Login","import { TextField , Button } from '@material-ui/core'\n\nconst NewPost = (props) => {\n\n  return (\n    <div>\n      <h2>Make a post</h2>\n      <form onSubmit={props.addMeme}>\n        <div>\n          <TextField label=\"Title\"\n            id='titleField'\n            type=\"text\"\n            value={props.newTitle}\n            name=\"Title\"\n            onChange={({ target }) => props.setNewTitle(target.value)}\n          />\n        </div>\n        <div>\n          <TextField label =\"Image link (URL)\"\n            id='urlField'\n            type=\"text\"\n            value={props.newMedia}\n            name=\"Url\"\n            onChange={({ target }) => props.setNewMedia(target.value)}\n          />\n        </div>\n        <Button variant=\"contained\" color=\"primary\" id='submitMeme-button' type=\"submit\">create</Button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewPost","/* eslint-disable no-unused-vars */\nimport SearchIcon from '@material-ui/icons/Search'\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { TextField, IconButton } from '@material-ui/core'\n\nconst UserSearchBar = (props) => {\n\n  const HandleFilter = (event) => {\n    props.setFilterData(event.target.value)\n  }\n\n  const ClearFilter = () => {\n    props.setFilterData('')\n  }\n\n  return (\n    <div className={props.classes.root}>\n      <TextField\n        id=\"searchField\"\n        type=\"text\"\n        variant=\"standard\"\n        name=\"SearchBar\"\n        value={props.filter}\n        onChange={HandleFilter}\n        placeholder=\"Search…\"\n        className={props.classes.textField}\n        InputProps={{\n          startAdornment: <SearchIcon fontSize=\"small\" />,\n          endAdornment: (\n            <IconButton\n              title=\"Clear\"\n              aria-label=\"Clear\"\n              size=\"small\"\n              onClick={ClearFilter}\n            >\n              <ClearIcon fontSize=\"small\" />\n            </IconButton>\n          ),\n        }}\n      />\n    </div>\n  )\n}\n\nexport default UserSearchBar","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nconst exportedObject = {\n  login\n}\n\nexport default exportedObject","\nconst notificationReducer = (state = '', action) => {\n  console.log('action: ' , action)\n  switch (action.type) {\n  case 'CREATED':\n    state = `${action.data.content}`\n    return state\n  case 'ZERO':\n    state = ''\n    return state\n  default:\n    return state\n  }\n}\n\nexport const setNotification = (content,duration) => {\n  console.log('content: ' , content)\n  return async dispatch => {\n    dispatch({\n      type: 'CREATED',\n      data: { content }\n    })\n    setTimeout(() => {\n      dispatch({\n        type: 'ZERO'\n      })\n    }, duration*1000)\n  }\n}\n\nexport default notificationReducer","\nconst loggedReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'LOGIN':\n    state = action.data\n    return state\n  case 'LOGOUT':\n    state = null\n    return state\n  default:\n    return state\n  }\n}\n\nexport const logIn = (user) => {\n  return async dispatch => {\n    dispatch({\n      type: 'LOGIN',\n      data: user,\n    })\n  }\n}\n\nexport const logOut = () => {\n  return async dispatch => {\n    dispatch({\n      type: 'LOGOUT'\n    })\n  }\n}\n\nexport default loggedReducer","/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from 'react'\nimport { useParams,Link } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport Modal from '@material-ui/core/Modal'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport userService from '../services/users'\nimport memeService from '../services/memes'\nimport Media from './MediaType'\nimport Function from '../functions'\nimport CommentIcon from '@material-ui/icons/Comment'\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp'\nimport Divider from '@mui/material/Divider'\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'\nimport IconButton from '@material-ui/core/IconButton'\n\nconst modalStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}))\n\n/**\n * Esittää käyttäjän sivun. Mikäli sivu tunnistetaan kirjautuneen käyttäjän omaksi sivuksi, sisältää se mahdollisuuden muuttaa avataria ja poistaa omia meemejä.\n * @param users kaikki sovelluksen käyttäjät\n * @param memes kaikki sovelluksen meemit\n * @param logged kirjautunut käyttäjä\n */\nconst User = ({ users, memes, logged }) => {\n\n  console.log('logged: ' , logged)\n\n  if (users.length < 1) {\n    return null\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const id = useParams().id\n  let user = users[0]\n  let theseMemes = []\n\n  for (var i = 0;i < users.length;i++)\n  {\n    if (id === users[i].id) {\n      user = users[i]\n      break\n    }\n  }\n\n  for (var j = 0;j < memes.length;j++)\n  {\n    if (id === memes[j].user.id) {\n      theseMemes.push(memes[j])\n    }\n  }\n\n\n  // =================================  Modal Build =================================\n\n  function SimpleModal() {\n\n    function getModalStyle() {\n      const top = 50\n      const left = 50\n\n      return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n      }\n    }\n\n    const classesModal = modalStyles()\n    const [modalStyle] = React.useState(getModalStyle)\n    const [open, setOpen] = React.useState(false)\n    const [newAvatar, setNewAvatar] = useState('')\n    const [file, setFile] = useState()\n    useEffect( () => { console.log(file) }, [file])\n\n    const handleOpen = () => {\n      setOpen(true)\n    }\n\n    const handleClose = () => {\n      setOpen(false)\n    }\n\n    /**\n     * Lähettää userServicen kautta PUT-requestin, jossa käyttäjäobjektille asetetaan uudeksi median arvoksi newAvatarin arvo.\n     */\n    const setAvatarByURL = async (event) => {\n      event.preventDefault()\n\n      if (newAvatar.length < 12) {\n        window.alert('The URL doesnt seem valid.')\n        return null\n      }\n\n      userService\n        .updateAvatar(user, newAvatar)\n        .then(returnedMeme => {\n        })\n        .catch(() => {\n          console.log(\n            'An error occurred'\n          )\n        })\n      window.location.reload()\n    }\n\n    return (\n      <div>\n        <Button color=\"primary\" variant=\"contained\" onClick={handleOpen}>Change Avatar</Button>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          aria-labelledby=\"simple-modal-title\"\n          aria-describedby=\"simple-modal-description\"\n        >\n          <div style={modalStyle} className={classesModal.paper}>\n            <form onSubmit={setAvatarByURL}>\n              <h2 id=\"simple-modal-title\">Submit a new avatar with a link to the image's URL</h2>\n              <div>\n                <TextField label=\"Avatar\"\n                  id='avatarField'\n                  type=\"text\"\n                  value={newAvatar}\n                  name=\"Title\"\n                  onChange={({ target }) => setNewAvatar(target.value)}\n                />\n              </div>\n              <div>\n                <Button variant=\"contained\" color=\"primary\" id='submitAvatar-button' type=\"submit\">Submit</Button>\n              </div>\n            </form>\n            <ModalUploadOption />\n          </div>\n        </Modal>\n      </div>\n    )\n  }\n\n  // =================================================================================================\n\n  if (logged.username === user.username) return (\n    <div>\n      <div>\n        <img alt=\"null\" src={user.avatar} width=\"300\" height=\"300\"/>\n      </div>\n      <SimpleModal />\n      <h1>{user.username}</h1>\n      <p>Activity points: {Math.abs(user.memes.length * 3) + Function.getLikes(user,memes) + Function.getComments(user,memes)}, <b>Rank: #{Function.getRank(user, users)}</b></p>\n      <p>Joined in {user.joined}</p>\n      <h2>Added memes</h2>\n      {theseMemes.map(meme =>\n        <div key={meme.id}><p><Link to={`../memes/${meme.id}`}>{meme.title}</Link>\n          <IconButton onClick={() => ConfirmMemeDelete(meme.id)} aria-label=\"delete\" size=\"medium\">\n            <DeleteForeverIcon fontSize=\"inherit\" />\n          </IconButton></p>\n        <Media meme={meme} id='userPageMedia'/>\n        <p>{meme.likes} <ThumbUpIcon />    {meme.comments.length} <CommentIcon /></p>\n        <Divider /></div>\n      )}\n    </div>\n  )\n\n  if (user) return (\n    <div>\n      <img alt=\"null\" src={user.avatar} width=\"300\" height=\"300\"/>\n      <h1>{user.username}</h1>\n      <p>Activity points: {Math.abs(user.memes.length * 3) + Function.getLikes(user,memes) + Function.getComments(user,memes)}, <b>Rank: #{Function.getRank(user, users)}</b></p>\n      <p>Joined in {user.joined}</p>\n      <h2>Added memes</h2>\n      {theseMemes.map(meme =>\n        <div key={meme.id}><p><Link to={`../memes/${meme.id}`}>{meme.title}</Link></p>\n          <Media meme={meme} id='userPageMedia'/>\n          <p>{meme.likes} <ThumbUpIcon />    {meme.comments.length} <CommentIcon /></p>\n          <Divider /></div>\n      )}\n    </div>\n  )\n}\n\n/**\n * Kysyy käyttäjältä varmistuksen meemin poistamisesta, ja toimii saadun vastauksen perusteella.\n * @param id käsiteltävän meemin id.\n * @returns jos vastaus=ok: poistaa meemin parametrinä annetun id:n perusteella ja palauttaa true. Jos vastaus=peruuta: palauttaa false.\n */\nfunction ConfirmMemeDelete(id)\n{\n  // eslint-disable-next-line no-restricted-globals\n  var confirmation = confirm('Are you sure you want to delete this post?')\n  if (confirmation) {\n    memeService.remove(id)\n    window.location.reload()\n    return true\n  } else\n    return false\n}\n\n/**\n * Mikäli avatar voidaan päivittää tiedoston lataamisen perusteella, palauttaa tämä komponentti mahdollisuuden toteuttaa sen käyttöliittymän kautta.\n */\nconst ModalUploadOption = () => {\n  const fileUploadIncluded = false\n  if (!fileUploadIncluded) return null\n  return (\n    <div>\n      <h2 id=\"simple-modal-title\">..Or upload a jpg file</h2>\n      <form action=\"http://localhost:3003/api/upload\" method=\"post\" enctype=\"multipart/form-data\">\n        <div className=\"flex\">\n          <label htmlFor=\"file\">File</label>\n          <input\n            name=\"avatar\"\n            type=\"file\"\n            id=\"file\"\n            accept=\".jpg\"\n            multiple\n          />\n        </div>\n        <div>\n          <Button variant=\"contained\" color=\"primary\" id='submitAvatar-button' type=\"submit\">Submit</Button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\n\nexport default User","import React, { useState, useEffect } from 'react'\nimport Function from './functions'\nimport Menu from './components/Menu'\nimport MemeInfo from './components/MemeInfo'\nimport Info from './components/Info'\nimport Login from './components/Login'\nimport Media from './components/MediaType'\nimport NewPost from './components/NewPost'\nimport UserSearchBar from './components/UserSearchBar'\nimport memeService from './services/memes'\nimport ticketService from './services/tickets'\nimport loginService from './services/login'\nimport './index.css'\nimport { setNotification } from './reducers/notificationReducer'\nimport { logIn, logOut } from './reducers/loggedReducer'\nimport { initializeMemes } from './reducers/memeReducer'\nimport { useSelector, useDispatch } from 'react-redux'\nimport User from './components/User'\nimport {\n  BrowserRouter as Router,\n  Switch, Route, Link } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport { TableContainer, Table, TableCell, TableRow, TableBody, Paper, IconButton, makeStyles, ImageListItem, ImageList, ImageListItemBar, Avatar, createTheme, ThemeProvider } from '@material-ui/core'\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp'\nimport { Alert } from '@material-ui/lab'\nimport { green, orange } from '@material-ui/core/colors'\nimport Box from '@mui/material/Box'\nimport ImageIcon from '@material-ui/icons/Image'\nimport CalendarTodayIcon from '@material-ui/icons/CalendarToday'\nimport CommentIcon from '@material-ui/icons/Comment'\nimport ControlPointIcon from '@material-ui/icons/ControlPoint'\n\n\nconst App = () => {\n\n  const [newTitle, setNewTitle] = useState('')\n  const [newMedia, setNewMedia] = useState('')\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [filter, setFilter] = useState('')\n  const [user, setUser] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const dispatch = useDispatch()\n  const noteMessage = useSelector(state => state.notification)\n  const users = useSelector(state => state.users)\n  const memes = useSelector(state => state.memes)\n\n  users.sort( compareByPoints )\n\n  const setFilterData = (data) => {\n    setTimeout(() => setFilter(data), 0)\n  }\n\n  /**\n   * Vertailee kahden käyttäjän pisteitä keskenään. Pisteet lasketaan seuraavasti:\n   * Käyttäjän meemien lukumäärä * 3\n   * + Käyttäjän meemien saamien tykkäysten määrä\n   * + Käyttäjän kommenttien määrä\n   * @param a ensimmäinen vertailtava objekti\n   * @param b toinen vertailtava objekti\n   * @returns -1 jos a:n pisteet suuremmat. 1 jos b:n pisteet suuremmat. 0 jos yhtäsuuret.\n   */\n  function compareByPoints( a, b ) {\n    if ( Math.abs(a.memes.length * 3) + Function.getLikes(a, memes) + Function.getComments(a, memes) > Math.abs(b.memes.length * 3) + Function.getLikes(b, memes) + Function.getComments(b, memes) ){\n      return -1\n    }\n    if ( Math.abs(a.memes.length * 3) + Function.getLikes(a, memes) + Function.getComments(a, memes) < Math.abs(b.memes.length * 3) + Function.getLikes(b, memes) + Function.getComments(b, memes) ){\n      return 1\n    }\n    return 0\n  }\n\n\n  useEffect(() => {\n    dispatch(initializeMemes())\n  }, [dispatch])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedMemeAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      dispatch(logIn(user))\n      memeService.setToken(user.token)\n      ticketService.setToken(user.token)\n    }\n  },[dispatch])\n\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: orange[500],\n      },\n      secondary: {\n        main: green[500],\n      },\n    },\n  })\n\n  /**\n   * Lähettää loginServicen kautta POST-requestin annetun usernamen ja passwordin mukaan, ja asettaa käyttäjän vastauksen perusteella.\n   */\n  const handleLogin = async (event) => {\n    event.preventDefault()\n\n    try {\n      const user = await loginService.login({\n        username, password,\n      })\n      window.localStorage.setItem(\n        'loggedMemeAppUser', JSON.stringify(user)\n      )\n      memeService.setToken(user.token)\n      dispatch(logIn(user))\n      setUser(user)\n      setUsername('')\n      setPassword('')\n      dispatch(setNotification(`Welcome '${user.username}'`,5))\n    } catch (exception) {\n      setErrorMessage('wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 3000)\n    }\n\n  }\n\n  /**\n   * Ilmoittaa localStoragelle, että käyttäjä kirjautuu ulos ja vie takaisin kirjautumissivulle.\n   */\n  const handleLogout = async () => {\n    window.localStorage.removeItem('loggedMemeAppUser')\n    dispatch(logOut())\n    window.location.href = '/'\n  }\n\n  /**\n   * Luo meemiobjektin newTitlen ja newMedian perusteella, ja lähettää niillä memeServicen avulla POST-requestin.\n   */\n  const addMeme = async (event) => {\n    event.preventDefault()\n\n    if (newTitle === '' || newMedia.length < 5) {\n      window.alert('Title or URL missing or not valid.')\n      return null\n    }\n\n    const memeObject = {\n      title: newTitle,\n      media: newMedia,\n    }\n\n    memeService\n      .create(memeObject)\n      .then(returnedMeme => {\n        dispatch(setNotification(`A new meme '${newTitle}' added`,5))\n        setNewTitle('')\n      })\n      .catch(() => {\n        setErrorMessage(\n          'An error occurred'\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 3000)\n      })\n  }\n\n  const logged = useSelector(state => state.loggedIn)\n\n  const Notification = ({ message }) => {\n    if (message === '') {\n      return null\n    }\n\n    return (\n      <div>\n        {(message &&\n<Alert severity=\"success\">\n  {message}\n</Alert>\n        )}\n      </div>\n    )\n  }\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    imageList: {\n      width: 600,\n      height: 900,\n    },\n    icon: {\n      color: 'rgba(255, 255, 255, 0.54)',\n    },\n  }))\n\n  const classes = useStyles()\n\n  const TopRatedMemeList = () => {\n\n    memes.sort( Function.compareByLikes )\n\n    return (\n      <ImageList className={classes.imageList}>\n        {memes.map(meme =>\n          <ImageListItem key={meme.id} cols={2} style={{ height: 'auto' }}>\n            <Media meme={meme} id='mainPageMedia'/>\n            <ImageListItemBar\n              title={<span><Link to={`../memes/${meme.id}`}>{meme.title}</Link></span>}\n              subtitle={<span>by {meme.user.username} on {meme.date}</span>}\n              actionIcon={\n                <IconButton aria-label={'Like'} href={`../memes/${meme.id}`} className={classes.icon}>\n                  <ThumbUpIcon />\n                  <span> {meme.likes} likes </span>\n                </IconButton>\n              }\n            />\n          </ImageListItem>\n        )}\n      </ImageList>\n    )\n  }\n\n  const MostRecentMemeList = () => {\n\n    memes.sort( Function.compareByDate )\n\n    return (\n      <ImageList rowHeight={180} className={classes.imageList}>\n        {memes.map(meme =>\n          <ImageListItem key={meme.id} cols={2} style={{ height: 'auto' }}>\n            <Media meme={meme} id='mainPageMedia'/>\n            <ImageListItemBar\n              title={<span><Link to={`../memes/${meme.id}`}>{meme.title}</Link></span>}\n              subtitle={<span>by {meme.user.username} on {meme.date}</span>}\n              actionIcon={\n                <IconButton aria-label={'Like'} href={`../memes/${meme.id}`}className={classes.icon}>\n                  <ThumbUpIcon />\n                  <span> {meme.likes} likes </span>\n                </IconButton>\n              }\n            />\n          </ImageListItem>\n        )}\n      </ImageList>\n    )\n  }\n\n  if (user === null) {\n    return (\n      <Login dispatch={dispatch} username={username} setUsername={setUsername} password={password} setPassword={setPassword} errorMessage={errorMessage} handleLogin={handleLogin}\n        setErrorMessage={setErrorMessage} setNotification={setNotification} noteMessage={noteMessage} Notification={Notification} user={user}/>\n    )\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container>\n        <Router>\n          <div id='title'>\n            <h1>MemeDump</h1>\n          </div>\n          <div id='loggedInfo' >\n            <p>Logged in as: {user.username}</p>\n          </div>\n\n          <Notification message={noteMessage} />\n\n          <Box sx={{\n            bgcolor: 'white',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}>\n            <Menu handleLogout={handleLogout} logged={logged}/>\n            <Switch>\n              <Route path=\"/memes/:id\">\n                <MemeInfo memes={memes} />\n              </Route>\n              <Route path=\"/top\">\n                <TopRatedMemeList />\n              </Route>\n              <Route path=\"/fresh\">\n                <MostRecentMemeList />\n              </Route>\n              <Route path=\"/info\">\n                <Info />\n              </Route>\n              <Route path=\"/newpost\">\n                <NewPost addMeme={addMeme} newTitle={newTitle} setNewTitle={setNewTitle} newMedia={newMedia} setNewMedia={setNewMedia}></NewPost>\n              </Route>\n\n              <Route path=\"/users/:id\">\n                <User users={users} memes={memes} logged={logged}/>\n              </Route>\n\n              <Route path=\"/users\">\n                <div id='searchBar'>\n                  <UserSearchBar filter={filter} setFilterData={setFilterData} classes={classes}/>\n                </div>\n                <TableContainer component={Paper}>\n                  <Table>\n                    <TableBody>\n                      {users.map(user => (\n                        user.username.includes(filter)\n                          ? (\n                            <TableRow key={user.id}>\n                              <TableCell>\n                                <span><Avatar alt={user.username} src={user.avatar} /><Link to={`../users/${user.id}`}>{user.username}</Link></span>\n                              </TableCell>\n                              <TableCell><ControlPointIcon />Activity points: {Math.abs(user.memes.length * 3) + Function.getLikes(user, memes) + Function.getComments(user, memes)}</TableCell>\n                              <TableCell><ImageIcon />posts: {user.memes.length}</TableCell>\n                              <TableCell><ThumbUpIcon />likes received: {Function.getLikes(user, memes)}</TableCell>\n                              <TableCell><CommentIcon />comments posted: {Function.getComments(user, memes)}</TableCell>\n                              <TableCell><CalendarTodayIcon /> joined in {user.joined}</TableCell>\n                            </TableRow>\n                          )\n                          : null\n                      ))}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </Route>\n              <Route path=\"/\">\n                <TopRatedMemeList />\n              </Route>\n            </Switch>\n          </Box>\n        </Router>\n      </Container>\n    </ThemeProvider>\n  )\n}\n\n\nexport default App\n","import userService from '../services/users'\n\nconst userReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'INIT_USERS':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const initializeUsers = () => {\n  return async dispatch => {\n    const users = await userService.getAll()\n    dispatch({\n      type: 'INIT_USERS',\n      data: users,\n    })\n  }\n}\n\nexport default userReducer","import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport memeReducer, { initializeMemes } from './reducers/memeReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport userReducer, { initializeUsers } from './reducers/userReducer'\nimport loggedReducer from './reducers/loggedReducer'\nimport memeService from './services/memes'\nimport userService from './services/users'\n\nconst combinedReducer = combineReducers({\n  users: userReducer,\n  memes: memeReducer,\n  notification: notificationReducer,\n  loggedIn: loggedReducer\n})\n\nconst store = createStore(\n  combinedReducer,\n  composeWithDevTools(applyMiddleware(thunk)\n  ))\n\nmemeService.getAll().then(memes =>\n  store.dispatch(initializeMemes(memes))\n)\n\nuserService.getAll().then(users =>\n  store.dispatch(initializeUsers(users))\n)\n\nstore.subscribe(() => console.log('store: ' , store.getState()))\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}